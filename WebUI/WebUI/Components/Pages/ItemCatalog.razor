@page "/ItemCatalog"
@using Models
@using Data
@using Components
@inject IDialogService DialogService
@inject ProductDbContext productDb

@rendermode InteractiveServer

<h1>Inventory</h1>

<div class="container">
    <div id="Inventory" class="row">
        <div class="col-md-12">
            <div class="card">
                <div class="card-header">
                    <EditForm Model="product" OnSubmit="AddInventoryProduct" Enhance>
                        <div class="hstack gap-2">
                            <label class="label-control">Name</label>
                            <InputText @bind-Value="product.Name" class="form-control"></InputText>
                            <label class="label-control">Selected Quantity</label>
                            <InputNumber @bind-Value="SelectedQuantity" class="form-control "></InputNumber>
                            <button type="submit" class="btn btn-primary">Save</button>
                        </div>
                    </EditForm>
                </div>
                <div class="card-body">
                    <FluentDataGrid Items="InventoryQueryable" Pagination="@invetorypagination">
                        <PropertyColumn Property="@(p => p.Id)" Sortable="true" Align="Align.Center" />
                        <PropertyColumn Property="@(c => c.Name)" Sortable="true" Class="country-name">
                            <ColumnOptions>
                                <div class="search-box">
                                    <input type="search" autofocus @onchange="SearchPerson" placeholder="Person name..." />
                                </div>
                            </ColumnOptions>
                        </PropertyColumn>
                        <PropertyColumn Title="Quantity" Property="@(p => p.Quantity)" Sortable="true" />
                        <TemplateColumn Title="Action">

                            <FluentButton @onclick="@(()=> OpenDialogAsync(context))" Appearance="Appearance.Accent">
                                Open Dialog
                            </FluentButton>
                            <FluentButton @onclick="@(()=>DeleteInventoryProduct(context))" Appearance="Appearance.Accent" BackgroundColor="Red">Delete</FluentButton>
                        </TemplateColumn>
                    </FluentDataGrid>

                    <FluentPaginator State="@invetorypagination" />
                </div>
            </div>
        </div>
    </div>
    <div id="ShoppingList" class="row">
       <h1>Shopping List</h1>
       <div class="card-body">
            <FluentDataGrid Items="ShoppingListQueryable" Pagination="@ShoppingListpagination">
                <PropertyColumn Property="@(p => p.Id)" Sortable="true" Align="Align.Center" />
                <PropertyColumn Property="@(c => c.Name)" Sortable="true" Class="country-name">
                    <ColumnOptions>
                        <div class="search-box">
                            <input type="search" autofocus @onchange="SearchPerson" placeholder="Person name..." />
                        </div>
                    </ColumnOptions>
                </PropertyColumn>
                <PropertyColumn Title="Quantity" Property="@(p => p.Quantity)" Sortable="true" />
                <TemplateColumn Title="Action">

                    <FluentButton @onclick="@(()=> OpenDialogAsync(context))" Appearance="Appearance.Accent">
                        Open Dialog
                    </FluentButton>

                </TemplateColumn>
            </FluentDataGrid>

            <FluentPaginator State="@ShoppingListpagination" />
        </div>
    </div>
</div>

@code {

    //Pagination
    PaginationState invetorypagination = new PaginationState { ItemsPerPage = 3 };
    PaginationState ShoppingListpagination = new PaginationState { ItemsPerPage = 3 };
    IQueryable<Product> InventoryQueryable => productDb.Inventory.Where(a => true);
    IQueryable<Product> ShoppingListQueryable => productDb.ShoppingList.Where(a => true);

    [SupplyParameterFromForm]
    InventoryProduct product { get; set; } = new();

    int SelectedQuantity = 1;

    protected override void OnInitialized()
    {

    }

    async Task OpenDialogAsync(Product seletedProduct)
    {
        DialogParameters parameters = new()
        {
            Title = $"Editing {seletedProduct.Name}",
            Width = "500px",
            Height = "500px",
            TrapFocus = false,
            Modal = true,
            PreventScroll = true
        };

        IDialogReference dialog = await DialogService.ShowDialogAsync<EditDialog>(seletedProduct, parameters);
        DialogResult result = await dialog.Result;


        if (result.Data is not null)
        {
            Product diaProduct = (Product)result.Data;
            productDb.Update(diaProduct);
            productDb.SaveChanges();
        }
        else
        {
            Console.WriteLine($"Dialog closed - Canceled: {result.Cancelled}");
        }
    }

    private void AddInventoryProduct()
    {
        if (product.Name is null) return;
        productDb.Inventory.Add(product);
        productDb.SaveChanges();
        product = new();
        return;
    }

    void Edit(Product incomingModel)
    {

    }

    void DeleteInventoryProduct(Product incomingModel)
    {
        productDb.Inventory.Remove((InventoryProduct)incomingModel);
        productDb.SaveChanges();
    }


    private Task SearchPerson(ChangeEventArgs e)
    {
        throw new NotImplementedException();
    }
}