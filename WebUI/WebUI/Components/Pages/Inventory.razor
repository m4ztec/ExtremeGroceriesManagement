@page "/Inventory"
@using Models
@using Data
@using Components
@using Account
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity;

@inject IDialogService DialogService
@inject ProductDbContext productDb
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<ApplicationUser> UserManager;

@attribute [Authorize]
@rendermode InteractiveServer

   
<div class="container">
    <AuthorizeView>
        <h1>Inventory of @context.User.Identity?.Name!</h1>
    </AuthorizeView>
    <div id="Inventory" class="row">
        <div class="col-md-12">
            <div class="card">
                <div class="card-header">
                    <EditForm Model="inventoryProduct" OnSubmit="AddInventoryProduct" Enhance>
                        <div class="hstack gap-2">
                            <label class="label-control">Name</label>
                            <InputText @bind-Value="inventoryProduct.Name" class="form-control"></InputText>
                            <label class="label-control">Selected Quantity</label>
                            <InputNumber @bind-Value="SelectedQuantity" class="form-control "></InputNumber>
                            <button type="submit" class="btn btn-primary">Add</button>
                        </div>
                    </EditForm>
                </div>
                <div class="card-body">
                    <FluentDataGrid Items="InventoryQueryable" Pagination="@invetorypagination">
                        <PropertyColumn Property="@(c => c.Name)" Sortable="true" Class="country-name">
                            <ColumnOptions>
                                <div class="search-box">
                                    <input type="search" autofocus @onchange="SearchPerson" placeholder="Person name..." />
                                </div>
                            </ColumnOptions>
                        </PropertyColumn>
                        <PropertyColumn Property="@(p => p.Owner)"/>
                        <PropertyColumn Title="Existing Quantity" Property="@(p => p.ExistingQuantity)" Sortable="true" />
                        <PropertyColumn Title="Desired Quantity" Property="@(p => p.DesiredQuantity)" Sortable="true" />
                        <TemplateColumn Context="inputProduct" Title="Action">
                            <FluentButton @onclick="@(()=>OpenDialogAsync(inputProduct))" Appearance="Appearance.Accent">Edit</FluentButton>
                            <FluentButton @onclick="@(()=>DeleteProduct(inputProduct))" Appearance="Appearance.Accent" BackgroundColor="Red">Delete</FluentButton>
                        </TemplateColumn>
                    </FluentDataGrid>

                    <FluentPaginator State="@invetorypagination" />
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    IdentityUser? user;

    PaginationState invetorypagination = new PaginationState { ItemsPerPage = 3 };
    IQueryable<Product> InventoryQueryable => productDb.Products.Where(a => a.Owner == user.Id);

    [SupplyParameterFromForm]
    Product inventoryProduct { get; set; } = new();

    int SelectedQuantity = 1;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var userClaims = authState.User;
        if ((userClaims.Identity?.IsAuthenticated ?? false) && userClaims != null )
        {
            user = await UserManager.FindByNameAsync(userClaims.Identity.Name ?? throw new Exception("User without Name"));      
        }
    }

    async Task OpenDialogAsync(Product seletedProduct)
    {
        DialogParameters parameters = new()
        {
            Title = $"Editing {seletedProduct.Name}",
            Width = "500px",
            Height = "500px",
            TrapFocus = false,
            Modal = true,
            PreventScroll = true
        };

        IDialogReference dialog = await DialogService.ShowDialogAsync<EditDialog>(seletedProduct, parameters);
        DialogResult result = await dialog.Result;


        if (result.Data is not null)
        {
            Product diaProduct = (Product)result.Data;
            productDb.Update(diaProduct);
            productDb.SaveChanges();
        }
        else
        {
            Console.WriteLine($"Dialog closed - Canceled: {result.Cancelled}");
        }
    }

    private void AddInventoryProduct()
    {
        if (inventoryProduct.Name is null) return;
        var ExistingProduct = productDb.Products.Where(a => a.Name == inventoryProduct.Name).FirstOrDefault();
        if (ExistingProduct != null)
        {
            ExistingProduct.ExistingQuantity += SelectedQuantity;
            productDb.Products.Update(ExistingProduct);
            productDb.SaveChanges();
            return;
        }

        inventoryProduct.Owner = user?.Id;
        productDb.Products.Add(inventoryProduct);
        productDb.SaveChanges();
        inventoryProduct = new();
        return;
    }

    void DeleteProduct(Product incomingModel)
    {
        productDb.Remove(incomingModel);
        productDb.SaveChanges();
    }

    private Task SearchPerson(ChangeEventArgs e)
    {
        throw new NotImplementedException();
    }
}