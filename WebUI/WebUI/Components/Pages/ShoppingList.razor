@page "/ShoppingList"
@using Models
@using Data
@using Components
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity;

@inject IDialogService DialogService
@inject ProductDbContext productDb
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<ApplicationUser> UserManager;

@rendermode InteractiveServer

@attribute [Authorize]

<div class="container">
    <h1>Shopping List</h1>
    <div id="ShoppingList" class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <EditForm Model="ShoppingListProduct" OnSubmit="AddShoppingListProduct" Enhance>
                        <div class="hstack gap-2">
                            <label class="label-control">Name</label>
                            <InputText @bind-Value="ShoppingListProduct.Name" class="form-control"></InputText>
                            <label class="label-control">Selected Quantity</label>
                            <InputNumber @bind-Value="ShoppingListProduct.DesiredQuantity" class="form-control "></InputNumber>
                            <button type="submit" class="btn btn-primary">Add</button>
                        </div>
                    </EditForm>
                </div>
                <div class="card-body">
                    <FluentDataGrid Items="ShoppingListQueryable" GridTemplateColumns="0.8fr 0.4fr 0.4fr 0.8fr" Pagination="@ShoppingListpagination">
                        <PropertyColumn Property="@(c => c.Name)" Sortable="true" Class="country-name">
                            <ColumnOptions>
                                <div class="search-box">
                                    <input type="search" autofocus @onchange="SearchProductByName" placeholder="Product name..." />
                                </div>
                            </ColumnOptions>
                        </PropertyColumn>
                        <PropertyColumn Title="Existing Quantity" Property="@(p => p.ExistingQuantity)" Sortable="true" />
                        <PropertyColumn Title="Desired Quantity" Property="@(p => p.DesiredQuantity)" Sortable="true" />
                        <TemplateColumn Context="inputProduct" Title="Action">
                            <FluentButton @onclick="@(()=>OpenDialogAsync(inputProduct))" Appearance="Appearance.Accent">Edit</FluentButton>
                            <FluentButton @onclick="@(()=>DeleteProduct(inputProduct))" Appearance="Appearance.Accent" BackgroundColor="Red">Delete</FluentButton>
                            <FluentButton @onclick="@(()=>NoveToInventory(inputProduct))" Appearance="Appearance.Accent" BackgroundColor="Orange">Fast Buy</FluentButton>
                            <FluentButton Title="@ActionButtonTooptip" @onclick="@(() => OpenCustomAmountDialog(inputProduct))" Appearance="Appearance.Accent" BackgroundColor="Green">Buy Custom Amount</FluentButton>
                        </TemplateColumn>
                    </FluentDataGrid>

                    <FluentPaginator State="@ShoppingListpagination" />
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    IdentityUser? user;

    PaginationState ShoppingListpagination = new PaginationState { ItemsPerPage = 3 };
    IQueryable<Product> ShoppingListQueryable => productDb.Products.Where(a => a.DesiredQuantity > a.ExistingQuantity && a.Owner == user.Id);

    [SupplyParameterFromForm]
    Product ShoppingListProduct { get; set; } = new();

    private readonly string ActionButtonTooptip = "Click to enter the amount bought";

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var userClaims = authState.User;
        if ((userClaims.Identity?.IsAuthenticated ?? false) && userClaims != null)
        {
            user = await UserManager.FindByNameAsync(userClaims.Identity.Name ?? throw new Exception("User without Name"));
        }
    }

    async void AddShoppingListProduct()
    {
        if (ShoppingListProduct.Name is null) return;
        var ExistingProduct = productDb.Products.Where(a => a.Name == ShoppingListProduct.Name).FirstOrDefault();

        if (ExistingProduct == null)
        {
            ShoppingListProduct.Owner = user?.Id;
            productDb.Products.Add(ShoppingListProduct);
            productDb.SaveChanges();
            ShoppingListProduct = new();
            return;
        }

        var shouldAdd = await OpenConfirmationDialogAsync(ShoppingListProduct);
        if (shouldAdd)
        {
            ExistingProduct.DesiredQuantity += ShoppingListProduct.DesiredQuantity;
            productDb.Products.Update(ExistingProduct);
            productDb.SaveChanges();
            ShoppingListProduct = new();
            StateHasChanged();
        }
    }

    void NoveToInventory(Product incomingProduct, int? amountBrough = null)
    {
        if (amountBrough == null)
        {
            incomingProduct.ExistingQuantity = incomingProduct.DesiredQuantity;
        }
        else
        {
            incomingProduct.ExistingQuantity += (int)amountBrough;
        }

        productDb.Products.Update(incomingProduct);
        productDb.SaveChanges();   
    }

    void DeleteProduct(Product incomingModel)
    {
        incomingModel.DesiredQuantity = incomingModel.ExistingQuantity;

        productDb.Products.Update(incomingModel);
        productDb.SaveChanges();
    }

    async Task OpenDialogAsync(Product seletedProduct)
    {
        DialogParameters parameters = new()
        {
            Title = $"Editing {seletedProduct.Name}",
            Width = "500px",
            Height = "500px",
            TrapFocus = false,
            Modal = true,
            PreventScroll = true
        };

        IDialogReference dialog = await DialogService.ShowDialogAsync<EditDialog>(seletedProduct, parameters);
        DialogResult result = await dialog.Result;


        if (result.Data is not null)
        {
            Product diaProduct = (Product)result.Data;
            productDb.Update(diaProduct);
            productDb.SaveChanges();
        }
        else
        {
            Console.WriteLine($"Dialog closed - Canceled: {result.Cancelled}");
        }
    }

    async Task<bool> OpenConfirmationDialogAsync(Product seletedProduct)
    {
        DialogParameters parameters = new()
            {
                Title = $"{seletedProduct.Name}",
                Width = "500px",
                Height = "200px",
                TrapFocus = false,
                Modal = true,
                PreventScroll = true,
                ShowDismiss = true,
                DialogType = DialogType.MessageBox

            };

        IDialogReference dialog = await DialogService.ShowDialogAsync<ConfirmShoppingListAdditionDialog>(seletedProduct, parameters);
        DialogResult result = await dialog.Result;

        if (result.Data != null)
        {
            return (bool)result.Data;
        }

        return false;
    }

    async Task OpenCustomAmountDialog(Product seletedProduct)
    {
        DialogParameters parameters = new()
        {
            Title = $"Editing",
            Width = "400px",
            Height = "220px",
            TrapFocus = false,
            Modal = true,
            PreventScroll = true
        };

        IDialogReference dialog = await DialogService.ShowDialogAsync<CustomAmountToAddDialog>("HiHiHi", parameters);
        DialogResult result = await dialog.Result;

        if (result.Data is not null)
        {
            NoveToInventory(seletedProduct, (int)result.Data);
        }
        else
        {
            Console.WriteLine($"Dialog closed - Canceled: {result.Cancelled}");
        }
    }


    private Task SearchProductByName(ChangeEventArgs e)
    {
        throw new NotImplementedException();
    }

}
